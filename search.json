[{"title":"写在一年后的2019富士山登顶日记","url":"/20200712_fujisan-memory/","content":"## 写在前面\n2019年8月中旬时候人生第一次登顶了富士山，作为人生マイルストーン的事件，当时就决定要写篇博客作为记录。然而拖延症发作一直没有动手，后来就打算等今年再走不同的路线登顶后再写。结果今年由于疫情原因，[官方也确定不开放登山了。](http://www.fujisan-climb.jp/current_status.html)今年再登顶的计划也就泡汤了，所以虽然迟到了快一年，但再不写可能就真的不会写了，所幸当时照片拍的还算多，还是可以边回忆边写下这篇记录的。\n\n## 前期准备\n富士山是日本第一高峰，肯定不能没有准备就贸贸然去攀登，自己当时也做了一页的功课，这里也简单说说。\n\n### 登山路线\n富士山有四条登山路线，分别为：\n- **吉田「よした」ルート**\n- **須走「すばしり」ルート**\n- **御殿場「ごてんば」ルート**\n- **富士宮「ふじのみや」ルート**\n\n登山难度的话大概是御殿場>須走=富士宮>吉田。\n另外还有一个令和元年的[登山人数数据](http://www.fujisan-climb.jp/trails/index.html)：\n| | 吉田ルート | 須走ルート | 御殿場ルート | 富士宮ルート|\n|---|---|---|---|---|\n|登山者数（令和元年）| 149,969人 | 20,215人 | 12,230人 |  53,232人|\n\n可以看出吉田线人数压倒性的多，而我又特别不喜欢人多混杂，所以虽然没有爬过高山的经验，但出于对自己体能的自信，还是选择了人数较少的须走路线。\n**另外我自己确实相对无压力地完成这次登山，但对于没有登山经验的人还是比较推荐走吉田，毕竟富士山不是完全没有风险的，人多的路线也相对较为安全**。\n\n![在我登山的那个月月底发生的山难](../img/in-post/20200712_fujisan-memory/mountaineering-accident.jpg)\n<center>在我登山的那个月月底发生的山难</center>\n\n### 物品准备\n在装备上我很多参考了机核的这篇[文章](https://www.gcores.com/articles/26612)，虽然专业度不算高但对我个人还算OK了，就是Timberland的鞋子太重了，换成高帮的登山鞋会更合适。\n别的路线不太清楚，但如果是走须走的话，一定要穿高帮鞋子，最好戴上鞋套，因为上下山很多路都是灰沙很大，不做防护的话可能半路就一鞋子沙了。\n![须走路线的下山道](../img/in-post/20200712_fujisan-memory/downhill.jpg)\n<center>须走路线的下山道</center>\n\n### 交通工具\n网上有很多富士山的登山攻略，主要都是吉田路线的，其他路线的确实相对较少。不过日语资料还是比较丰富，我主要是通过[富士さんぽ](http://www.fujisanpo.com/)来做行程的，最后选择从新宿坐小田急到御殿場站，再转巴士可以直接到须走的登山口。\n\n### 住宿\n住宿方面，如果想要爬夜山看日出的话，还是很有必要预定山小屋的，选择直接在山上过夜的人也有很多，但如果天气不好比如下雨什么的就难受了，不太推荐这么做。我自己是花了7000多日元定了八合目半的一个山小屋，虽然没什么住宿体验（后面会讲），但好歹有个挡风的地方，不至于在山顶瑟瑟发抖。\n有一点需要注意，**每一条登山岛会路过的山小屋是不一样的**，预定之前要查清楚自己会不会路过。\n\n## 登山过程\n![御殿場駅](../img/in-post/20200712_fujisan-memory/welcome-to-gotemba.jpg)\n<center>御殿場駅</center>\n\n### 喜提队友\n\n8月10号一大早从新宿出发，大概中午就到了御殿場駅，出站就有巴士可以直接到须走口登山口，这让一开始担心迷路的我舒了一口气。\n\n在巴士的时候遇上了一个在车上侃侃而谈的中国人小哥，装备比我齐全，看上去很有经验的样子。交谈了知道他是在日留学生（下文简称A小哥），年纪比我还小，倒是让我有些惊讶。跟他通行的还有一个女生（下文简称B小姐），一番寒暄后他邀请我同行，因为我是自己一个人去的，所以没什么包袱就愉快入队了，至此暂时结成了一个三人小队。\n\n![五合目登山口](../img/in-post/20200712_fujisan-memory/subashiri-gogoume.jpg)\n<center>须走口五合目登山口，刚抵达的时候赶上山腰浓雾</center>\n\n巴士大概不到一个小时就到了须走口五合目，这里其实已经是半山腰了，所以严格意义来讲我们算是从半山腰开始登山的。登山口有几家店买饮食和土特产，因为到的时间是中午，我们选择在那里吃了一顿午饭，稍微准备一下才出发的。\n\n出发前因为A小哥的建议我买了一双鞋套，这个在后来下山时候帮了我很多，虽然我穿的是高帮鞋，但下山时候的火山灰实在太厚了。\n\n![五合目登山口](../img/in-post/20200712_fujisan-memory/subashiri-gogoume2.jpg)\n<center>须走口五合目登山口，吃完午饭的时候雾气退散了许多</center>\n\n五合目到七合目之间的富士山还是比较多树木的，而且刚登山的时候雾气很大，一度担心会不会下雨，路上零星会遇到一些登山的人，日本登山有他们的挨拶的文化，每次路过的人都会互相打招呼，这个气氛我不如果走吉田会不会有？毕竟人流多的话每次都要打招呼也额外会花费不少体力吧？\n \n![五合目登山路](../img/in-post/20200712_fujisan-memory/mountain-road.jpg)\n<center>五合目登山路，刚开始雾气还是比较大的</center>\n\n### 小插曲：劝退\n\n在六合目的时候还遇到一个欧美女人和两个中国男生的队伍，两个男生都穿日常休闲装，一开始没多想还以为是大学师生出来活动，后来搭话了知道他们也是临时组队的。\n\n两个男生是刚高考完出来旅游的，因为旅馆在附近，下午没事觉得离富士山不远就直接过来爬山了。问他们打算的时候他们还说想要爬到山顶然后下山回去，当时听到了还是有点被惊到，毕竟什么装备都没带，连头灯手电筒都没有，两个高中生想要半天来回海拔三千多米的高山，怎么想很危险，当时又接近晚上了，于是一通好说歹说后，两个男孩也意识到不妥，乘着太阳还没下山就让他们回去了。\n\n![6.5合目](../img/in-post/20200712_fujisan-memory/rokugoume.jpg)\n<center>6.5合目看雾</center>\n\n### 队友喜加一\n![小石堆](../img/in-post/20200712_fujisan-memory/stones.jpg)\n<center>六七合目附近的小石堆</center>\n\n之前遇到的两个队友里面，A小哥和B小姐是在知乎的登山群认识的，而且他们两个都不是第一次等富士山了。而且B小姐意外地体力特别好（后来才知道她是马拉松选手），A小哥体力倒是一般，所以后来基本都是B小姐远远在前面，我在中间，A小哥殿后。\n\nA小哥很明显是很健谈的人，在6.5合目的时候认识了一个单独爬山的C小哥，也是刚来日本的学生，结果到七合目的时候C小哥就顺利入队了。\n\n![云层](../img/in-post/20200712_fujisan-memory/clouds.jpg)\n<center>七合目开始云层就在自己的下面了</center>\n\n![山路](../img/in-post/20200712_fujisan-memory/mountain-road3.jpg)\n<center>山路也越来越像火山了</center>\n\n![云层2](../img/in-post/20200712_fujisan-memory/clouds2.jpg)\n<center>云层还有远处的A小哥</center>\n\n### 先行\n到七合目的时候有一个山小屋，而且刚好还有床位。队伍里面只有我自己是提前预定了山小屋了，因为担心后面没有山小屋可以住宿，所以剩下的队友都决定在这里休息到半夜再继续走，我便自己一个人继续前进了。\n\n![云小屋和云](../img/in-post/20200712_fujisan-memory/mountain-hut.jpg)\n<center>云小屋和云</center>\n\n去爬富士山之前刚看了《天气之子》，刚巧爬山路上也看到了类似电影里面的雨云。\n夏季的富士山远远看着黑秃秃的，但置身山上时候，随便远眺都是各种美景。\n\n![云层3](../img/in-post/20200712_fujisan-memory/clouds3.jpg)\n<center>夕阳和雨云</center>\n\n![七合目的牌子](../img/in-post/20200712_fujisan-memory/board.jpg)\n<center>七合目的牌子</center>\n\n\n### 入夜\n![入夜](../img/in-post/20200712_fujisan-memory/the-color-of-the-night.jpg)\n<center>夜色</center>\n\n到八合目的时候已经是晚上七八点了，夜色变深，天气也渐渐变冷了。从七点五合目到八合目路上已经只有零星几个人，这时候已经需要戴上头灯才能看清路了。\n\n从我这一面的山可以看到远处的城镇，当时是夏天，远处某个城市应该在举办花火大会。\n\n![烟花](../img/in-post/20200712_fujisan-memory/fireworks.jpg)\n<center>前方是前往富士山顶的道路，后面是远处城镇的花火</center>\n\n第一次登夜山，好在没有下雨，我到八点五合目预定的山小屋的时候差不多是8点多，当时工作人员已经准备收拾桌子了，我赶上他们厨房关门前点了一碗拉面，虽然后来在山顶发现也有卖拉面的，不过并没有去吃，所以山小屋点的这碗拉面就是我在日本最高处吃的拉面了。\n\n![拉面](../img/in-post/20200712_fujisan-memory/Ramen.jpg)\n<center>日本最高峰吃的拉面，价格800多日元</center>\n\n### 山小屋\n\n在山小屋外面的座椅陆陆续续会来一些登山者，他们都是没能预约上山小屋的，他们大部分都选择了在这里修整，不过因为山小屋不让没预定的人进里面，所以他们只能在外面坐着。\n\n这里还是蛮庆幸自己提前预定到了山小屋，因为入夜后山上真的很冷，而且那天也是天气好没下雨，如果下雨的话我真的不知道他们在外面要怎么过。\n\n![山小屋](../img/in-post/20200712_fujisan-memory/mountain-hut2.jpg)\n<center>在山小屋外面休息的登山者</center>\n\n山小屋的环境其实不怎么好，外面一个大堂，里面就是一个大房间，连厕所都要出去外面才有。  \n\n![山小屋外面的厕所](../img/in-post/20200712_fujisan-memory/toilet.jpg)\n<center>高山上的厕所不能奢望太多，里面味道十分感人</center>\n\n我在的那个房间大概就六七十平，分为了上下床，大概塞了两三百人（不确定），反正当时留给我的床铺的宽度十分狭窄，连翻身都是奢望。而且几百号人挤在一起，打呼的人也并不少，很不幸的当时我旁边睡着屋子里打呼最大声的一位，翻来覆去实在受不了，所幸也就没睡直接去外面大堂坐着了。\n\n然后这里我做了一个很错误的决定，因为在山小屋里面实在无聊，干瞪着眼睡不着，又不好发出声响免得吵到别人，然后到午夜12点过后，外面的登山者也陆陆续续往山上出发。\n\n当时我睡不着，也就想着跟着登山的部队一起往山上继续走段路，这里也不知道是幸运还是不幸。\n\n### 后半夜\n![夜间的登山者队伍](../img/in-post/20200712_fujisan-memory/mountaineer.jpg)\n<center>夜间的登山者队伍</center>\n\n山小屋外面十分冷，而且我出山小屋后才发现头灯落在了里面（后来也没找回来），当时也确定了队友从七合目的山小屋出发，我就想着在外面等他们来了一起走。\n当时大概等了一两个小时，因为山小屋回不去（走了一段距离），外面风大又很冷，所以大概是我这次爬山最难受的一段时间，到半夜两点时候开始发现情况不太对劲了。\n\n须走线和吉田线在本八合目开始交汇，到了后半夜很多为了看日出的登山者都开始继续启程，山道也开始变得拥挤了。\n\n![从我下方蜂拥过来的登山者](../img/in-post/20200712_fujisan-memory/mountaineer2.jpg)\n<center>从我下方蜂拥过来的登山者</center>\n\n我在大约不到九合目的地方开始发现前面的登山队伍开始移动得很缓慢，而此时我的队友发消息过来说他们还不到八合目（后面的拥挤也导致他们前进缓慢），此时离日出的预计时间（4点多）只剩一个多小时了，担心来不及山顶看日出，于是跟他们打了招呼，我便开始继续向山顶出发了。\n\n![移动缓慢的队伍](../img/in-post/20200712_fujisan-memory/mountaineer3.jpg)\n<center>移动缓慢的队伍</center>\n\n### 日出\n从九合目到山顶的路线移动特别缓慢，一方面是来自吉田路线的大量人流，另一方面也是登顶路线相对的狭窄陡峭。\n我的运气还算好，在日出天际线出来的时候已经接近山顶的鸟居了，此时我后方还有大量人流，他们应该都只能在山路边看日出了。\n\n![天际线](../img/in-post/20200712_fujisan-memory/skyline.jpg)\n<center>天际线</center>\n\n![无缘山顶看日出的人流](../img/in-post/20200712_fujisan-memory/mountaineer4.jpg)\n<center>无缘山顶看日出的人流</center>\n\n![天际线2](../img/in-post/20200712_fujisan-memory/skyline2.jpg)\n<center>山顶鸟居边等待日出的人们</center>\n\n到山顶的时候已经有很多人在了，日出的位置面向着河口湖，随着太阳升起，当时真的有一种在林克走出山洞初窥海拉尔的壮观的感觉。\n\n![日出](../img/in-post/20200712_fujisan-memory/sunrise.jpg)\n<center>日出的壮观美景</center>\n\n### 富士山顶\n![山顶](../img/in-post/20200712_fujisan-memory/peak.jpg)\n<center>山顶的人</center>\n\n看完日出，大概等了半个多小时我的队友才姗姗来迟，我们在山顶吃了些东西休整了一下，A小哥甚至还带了一些叉烧。\n\n富士山的山顶还是很大的，上面有各种物产店，剑锋石碑，还有山顶邮局。而在中间有一个凹下去的大坑，在下面还有一个鸟居。\n我们在A小哥的提议下去了山顶邮局，从这里寄出的明信片会有一个限定的富士山顶章（日本人对各种章的着迷还是让人蛮莫名的），我也跟着买了一组寄给国内的朋友，不过后来好像只有一半多的人收到了，也是遗憾。\n\n![山顶](../img/in-post/20200712_fujisan-memory/peak2.jpg)\n<center>让人在意的洞</center>\n\n![山顶邮局](../img/in-post/20200712_fujisan-memory/peak3.jpg)\n<center>山顶邮局和日本最高的📮</center>\n\n### 下山\n![倒下的石碑](../img/in-post/20200712_fujisan-memory/downhill2.jpg)\n<center>倒下的石碑</center>\n\n在山顶逛了一圈便决定下山了，下山时候跟队友商量了下，最终还是选择走须走下山，主要我们都觉得吉田线人太多了。\n\n![下山的景色](../img/in-post/20200712_fujisan-memory/downhill3.jpg)\n<center>下山的景色</center>\n\n不过我们选择之前并没有事先了解好须走线的上下山路线区别，导致队友之一的C小哥后来脚受伤了。\n\n![下山的景色](../img/in-post/20200712_fujisan-memory/downhill4.jpg)\n<center>须走线下山口的景色</center>\n\n走须走线上山的时候虽然也不轻松，但总体是山地的感觉，而下山的时候有很大的不同，因为有很长一段路都是柔软的沙路，而且个别沙道也一份陡峭，据说这也是富士山的名物，叫做“砂走り”。\n\n所以基本上下山时候是滑着下来的，从感觉上来讲有点像双板滑雪，一开始有点害怕，但后来滑下来也是异常刺激。\n\n刺激的活动也伴随着危险，全程沙走下来也很消耗体力，队友的C小哥就不幸脚受伤了，所以后来我们下山的行程比预计晚了不少，不过好在没有更危险的事发生。\n\n![砂走り](../img/in-post/20200712_fujisan-memory/sunahashiri.jpg)\n<center>砂走り（图来源于网上）</center>\n\n大概在下午5点多抵达须走五合目，然后原路巴士和小田急就回东京了。原本想要下山后去泡个温泉，也因为没时间错过了，希望下次会有机会。\n\n## 写在最后\n写这篇记事时候日本新冠第二波正来势汹汹，除了不能出去浪之外，对于未来的生活多少也有感到些不安。\n这半年的世界局势变化之快，也让人深感个体面对时代洪流的无力。\n总之还是希望2021年能再次登顶富士山吧。\n\n","tags":["生活","登山"]},{"title":"用IDEA Community和Docker构建Spring Boot开发环境","url":"/20200516_spring-docker-debug/","content":"\n## 写在前面\n前阵子开始学习Docker，容器化确实是很方便很有魅力的技术，因为在工作中并没有用到，便想着能不能在自己的日常开发中使用学习。\n\n实践上的话第一个想到的还是用来构建开发环境吧，不同于其他发行版多的语言，Java开发环境中JDK还是比较少变化的（当然前两年开始半年发布一个大版本了），而且Java是编译型语言，在将Docker运用到开发环境中感觉还是较为麻烦的，这里记录一下自己的折腾过程。\n\n## 环境说明\n本文主要围绕使用IDEA Community进行Spring Boot应用的开发做记录，在网上查找资料时感觉IDEA不同版本下对Docker的使用差别还蛮大的，毕竟Docker也是这几年才快速发展的技术，IDE厂商们跟进肯定也不是一步到位的，前期坑也不少，如果想在不同版本尝试体验的话，我会推荐你直接查看IDEA官方的Guide。\n本文涉及的工具版本等如下：\n* IDEA Community 2020.1.1   \n  （安装好Docker和Spring插件）\n* Docker 19.03.8\n* docker-compose 1.25.4\n\n## 目标效果\n首先是程序，主要想实践一个每次访问后递增数字的Restful的接口，数字存在Redis容器中；  \n开发效果上当然想尽量能够跟直接在本地开发一样，包括热更新等的使用体验。\n\n## 程序的运行环境完全使用Docker\n### 文件准备\nDemo的代码可以查看我的[Github仓库](https://github.com/zhaozecheng/spring-docker-debug-demo)。\n1. Java程序  \n首先先通过Spring Assistant插件创建一个Spring Boot项目，勾选上web，Redis和devtool等需要的依赖后，实现我需要的程序如下： \n    ```java\n    @RestController\n    @RequestMapping(\"/demo\")\n    public class DemoController {\n\n        @Autowired\n        private StringRedisTemplate stringRedisTemplate ;\n\n        private final String KEY = \"demo-key\";\n\n        @GetMapping(\"/increase\")\n        public String increase() {\n            String result;\n\n            if (stringRedisTemplate.hasKey(KEY)) {\n                String val = stringRedisTemplate.opsForValue().get(KEY);\n                result = (Integer.parseInt(val) + 1) + \"\";\n                stringRedisTemplate.opsForValue().set(KEY, result);\n            } else {\n                stringRedisTemplate.opsForValue().set(KEY, \"1\");\n                result = \"1\";\n            }\n            return result;\n        }\n    }\n    ```\n\n1. 创建Dockerfile  \n创建一个Dockerfile，拷贝项目后执行`mvn packge`打包：\n\n    ```dockerfile\n    FROM openjdk:11\n\n    COPY . /project\n    RUN apt-get update \\\n        && apt-get install -y maven \\\n        && cd /project \\\n        && mvn package\n\n    CMD [\"java\", \"-jar\", \"/project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar\"]\n    ```\n\n1. 创建docker-compose.yml  \n创建docker-compose文件，主要包含执行jar包的app容器和redis容器\n    ```yml\n    version: '3'\n\n    services:\n    app:\n        build:\n        context: .\n        dockerfile: Dockerfile\n        ports:\n        - \"8080:8080\"\n        depends_on:\n        - redis\n        command: java -jar /project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar\n\n    redis:\n        image: redis:5-alpine\n        ports:\n        - \"6379:6379\"\n        command: redis-server\n    ```\n\n1. Spring配置文件  \n因为运行在Docker上，`application.yml`上redis的host填入redis容器的名称。\n    ```yml\n    spring:\n        redis:\n            database: 0\n            host: redis\n            port: 6379\n\n    ```\n\n### 运行程序\n安装好Docker插件后在`docker-compose.yml`文件左侧会有启动和debug图标，直接启动跟用`docker-compose up`差不多，下面记录一下debug启动。\n\n1. 启动参数配置\n\n    点击`docker-compose.yml`文件左侧的debug图标后，在出现的面板上勾选上当前模块，然后双击下面的launch编辑docker的启动参数。  \n    关键在于`-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005`这个参数，它的作用是指定JVM开启调试端口，后面踩坑记录里也会涉及到它。\n    > 如果JDK是8或者之前的版本，address的值改成5005，即`address=5005`  \n\n\n    ![启动面板配置](../img/in-post/20200516_spring-docker-debug/run-configuration.jpg)\n    <center>启动面板配置</center>\n\n    ![编辑Docker启动参数](../img/in-post/20200516_spring-docker-debug/configure-docker.jpg)\n    <center>编辑Docker启动参数</center>\n\n1. Debug模式启动\n\n    编辑好启动器后可以直接点击点击`docker-compose.yml`文件左侧的debug图标启动程序，不过因为会重新创建容器，所以如果已经有容器在运行的话要先停止运行并删除。\n\n    ![启动程序](../img/in-post/20200516_spring-docker-debug/startup.jpg)\n    <center>点击启动程序</center>\n\n    ![启动成功](../img/in-post/20200516_spring-docker-debug/starting-success.jpg)\n    <center>启动成功</center>\n\n1. 访问程序\n    \n    启动后通过`http://localhost:8080/demo/increase`连续访问接口，递增的接口便完成了。\n\n    ![第一次访问](../img/in-post/20200516_spring-docker-debug/access1.jpg)\n    <center>第一次访问</center>\n\n    ![第二次访问](../img/in-post/20200516_spring-docker-debug/access2.jpg)\n    <center>第二次访问</center>\n\n1. 调试程序\n\n    这个时候已经可以正常打断点和调试程序了。\n\n    ![设置断点](../img/in-post/20200516_spring-docker-debug/set-breakpoint.jpg)\n    <center>设置断点</center>\n\n    ![进入断点](../img/in-post/20200516_spring-docker-debug/debug-application.jpg)\n    <center>访问接口进入断点</center>\n\n1. 热部署\n\n    如果事先引入了`devtools`依赖的话，热部署也是可以直接用的（需要重新编译）。\n\n    ![修改程序递增值为2](../img/in-post/20200516_spring-docker-debug/change-code.jpg)\n    <center>修改程序递增值为2</center>\n\n    ![重新编译后日志](../img/in-post/20200516_spring-docker-debug/event-log.jpg)\n    <center>重新编译后日志</center>\n\n    ![修改后第一次访问](../img/in-post/20200516_spring-docker-debug/access3.jpg)\n    <center>修改后第一次访问</center>\n\n    ![修改后第二次访问](../img/in-post/20200516_spring-docker-debug/access4.jpg)\n    <center>修改后第二次访问</center>\n\n    可以看到递增值变成了2，这里容器并没有重新启动的，不过如果修改配置文件或者依赖文件的话就需要重启容器或者重新build了，这个还是相对麻烦的。\n\n\n## 踩坑记录\n### 遇到`handshake failed - connection prematurally closed`  \n\n在启动容器的时候有遇到启动不成功，报一下log的情况：  \n\n```\n10:21\tError running 'Remote with compose': Unable to open debugger port (localhost:5005): java.io.IOException \"handshake failed - connection prematurally closed\"\n```  \n\n网上查了下发现引起这个错误的可能还是蛮多的，从最常见的启动命令行写错到本地JVM版本与Docker容器JVM版本不同，好几种都有。\n\n不过上面这些原因在我自己身上都不适用，调查时候发现容器都是成功启动的，容器的调试端口（5005）也是运行着的。\n于是通过`docker exec`进入容器用，发现5005端口并没有被监听，于是怀疑jar包运行时候`-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005`没有生效。\n\n于是退出容器适用`docker inspect`查看容器信息，发现启动参数确实很奇怪：\n    \n![docker inspect查看启动参数](../img/in-post/20200516_spring-docker-debug/docker-inspect1.jpg)\n<center>docker inspect查看启动参数</center>\n\n查找到这里就基本知道原因了，IDEA的Docker启动器上配置的启动调试端口的命令行被覆盖或者说拼接在一个没有启动调试端口的命令行后面，导致后面连接调试端口失败。然后我查看当时的Dockerfile，发现当时的代码如下：\n\n```dockerfile\nFROM openjdk:11\n\nCOPY . /project\nRUN apt-get update \\\n    && apt-get install -y maven \\\n    && cd /project \\\n    && mvn package\n\nENTRYPOINT [\"java\", \"-jar\", \"/project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar\"]\n```\n\n跟上面的Dockerfile不同的地方在于当时根据[官方DEMO](https://github.com/IdeaUJetBrains/SpringBootDockerDemoDebug/blob/master/Dockerfile)学习，执行默认命令的时候用了`ENTRYPOINT`而不是`CMD`，而在`docker-compose.yml`文件的代码如下：\n```yml\nversion: '3'\n\nservices:\napp:\n    build:\n    context: .\n    dockerfile: Dockerfile\n    ports:\n    - \"8080:8080\"\n    depends_on:\n    - redis\n    command: java -jar /project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar\n\n...\n...\n...\n```\n这里用的是`command`命令，因为Dockerfile和docker-compose.yml文件的命令基本是一致的，所以我去看了下docker-compose.yml文档，发现确实有[entrypoint](https://docs.docker.com/compose/compose-file/#entrypoint)参数，并且有下面这段Note：\n```\nSetting entrypoint both overrides any default entrypoint set on the service’s image with the ENTRYPOINT Dockerfile instruction, and clears out any default command on the image - meaning that if there’s a CMD instruction in the Dockerfile, it is ignored.\n```\n而[command](https://docs.docker.com/compose/compose-file/#command)上并没有类似的Note，这说明docker-compose.yml文件的`entrypoint`可以覆盖Dockerfile的`CMD`，但`command`应该是没法覆盖Dockerfile的`ENTRYPOINT`的，于是通过将Dockerfile的`ENTRYPOINT`改成`CMD`，果然可以正常执行了。\n\n![docker inspect查看启动参数](../img/in-post/20200516_spring-docker-debug/docker-inspect2.jpg)\n<center>修改后通过docker inspect查看启动参数</center>\n\n写这个Demo时候我都是参考官方Demo的代码来写的（后来试着跑官方Demo也有同样问题），算是踩了官方的坑，不过也是有自己对Docker还不太熟悉的原因吧。\n\n## 写在后面\nIDEA对于Docker的支持总体来讲还算成熟，但用的时候还是有一些不太舒服的地方，比如修改依赖或者配置等后需要重新打包镜像，应用的调试信息没法在IDEA的控制台查看，还时不时可能有一些小坑等等。但好处也是一样的，随着Java大版本发布频率变高，可能个人开发环境需要多个版本JDK的情况会变多，那么用Docker隔离环境还是很舒服的，特别是对我这样强迫症而言，我现在都有把本地机器各种环境都搬上Docker的冲动了。\n\n## 参考\n* [Run and debug a Spring Boot application using Docker Compose](https://www.jetbrains.com/help/idea/run-and-debug-a-spring-boot-application-using-docker-compose.html)  \n* [SpringBootDockerDemoDebug](https://github.com/IdeaUJetBrains/SpringBootDockerDemoDebug)\n* [ntelliJ IDEAからDocker上で動くSprint Bootアプリにdebuggerをつなぐ](https://www.sys1yagi.com/entry/2019/04/04/165234)","tags":["Docker","折腾"]}]