<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github Action小尝试</title>
      <link href="/20200811_auto-deploy-by-github-action/"/>
      <url>/20200811_auto-deploy-by-github-action/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近尝试用GitHub Action来自动化部署我的<a href="https://github.com/xize1993/leetcode">leetcode刷题本</a>，这是一个使用vuepress构建，托管在GitHub Page的静态网站。<br>一番折腾下来发现GitHub Action差不多可以满足我对自动化部署+不污染本地环境的需求了，这篇文章就来分享记录一下。</p><h2 id="修改前的工作流"><a href="#修改前的工作流" class="headerlink" title="修改前的工作流"></a>修改前的工作流</h2><p>进入正题之前，先来介绍一下我旧的工作流：</p><p><img src="../img/in-post/20200811_auto-deploy-by-github-action/catalog1.jpg" alt="修改前的目录结构"></p><center>修改前的目录结构</center><p>上面的图片是用GitHub Action改造之前的目录结构，之前是用Docker和一些Python脚本来实现了一些自动化功能，以新建一个post为例，当时的工作流如下：</p><ol><li>在leetcode官网解题</li><li>在本地调用<code>get_problem.py</code>脚本，根据指定的题号生成新的post模板</li><li>将代码和解题思路填进模板</li><li>调用<code>push.sh</code>脚本，它会完成下面这些操作:<ol><li>调用脚本更新vuepress配置文件(根据文件更新sidebar)</li><li>启动vuepress的docker镜像，生成静态文件</li><li>分别将markdown文件和生成的静态文件推送到master分支和gh-pages分支</li></ol></li></ol><p>上面这个工作流已经算得上简洁了，因为用了docker，也不需要在本地环境安装vuepress。<br>但改用GitHub Action可以更加的自动化，而且完全脱离本地环境。</p><h2 id="GitHub-Action改造"><a href="#GitHub-Action改造" class="headerlink" title="GitHub Action改造"></a>GitHub Action改造</h2><p>用Github Action的改造主要分为三步：</p><ol><li>当post被push到master分支时，能够在Github Action环境中自动生成静态文件并提交到gh-pages分支</li><li>根据自定规则创建新issue时，自动生成一个post模板并提交到临时目录</li><li>在github网站编辑好post，关闭issue，自动将post移动到指定的目录，并且触发第一步</li></ol><h3 id="自动构建静态文件"><a href="#自动构建静态文件" class="headerlink" title="自动构建静态文件"></a>自动构建静态文件</h3><p>静态博客最重要的肯定是生成静态文件，而这一步也是最简单了，因为GitHub Action已经有不少现成的第三方workflow了，直接拿来主义就好。</p><p><img src="../img/in-post/20200811_auto-deploy-by-github-action/vuepress-deploy-actions.jpg" alt="Github Action仓库上可用的workflow"></p><center>Github Action仓库上可用的workflow</center><p>我直接用了上图第一个的<a href="https://github.com/jenkey2011/vuepress-deploy">vuepress-deploy</a>，并且在执行deploy之前调用了python脚本生成vuepress的config文件（主要是生成sidebar）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">vuepress-depoly</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> </span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'src/**'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">python</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">python-version:</span> <span class="string">'3.8'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate configuration</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-vuepress</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">pip</span> <span class="string">install</span> <span class="string">pyyaml</span></span><br><span class="line">        <span class="string">python</span> <span class="string">.github/workflows/script/vuepress_config_generator.py</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment"># build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vuepress-deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">jenkey2011/vuepress-deploy@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">BUILD_SCRIPT:</span> <span class="string">yarn</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">BUILD_DIR:</span> <span class="string">src/.vuepress/dist/</span></span><br></pre></td></tr></table></figure><p>这样子当我往master分支的<code>src</code>目录下push post的时候，就会触发这个workflow，<a href="https://github.com/jenkey2011/vuepress-deploy">vuepress-deploy</a>默认会将生成的静态文件推送到gh-pages分支。</p><p>如果比较喜欢在本地环境写博客的话，到这一步就可以了，不过因为我的这个仓库是leetcode刷题本，基本上就是将leetcode上写的代码搬过来做记录而已，所以我就想直接在GitHub上完成全部的过程，而不需要在本地进行commit，push之类的操作。</p><h3 id="根据新建issue创建post模板"><a href="#根据新建issue创建post模板" class="headerlink" title="根据新建issue创建post模板"></a>根据新建issue创建post模板</h3><p>这里我再创建一个Action如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">new-post</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">issues:</span></span><br><span class="line">    <span class="attr">types:</span> <span class="string">[opened]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup Python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">python</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">python-version:</span> <span class="string">'3.8'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate new post</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">new</span> <span class="string">post</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">GITHUB_REPOSITORY:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">pip</span> <span class="string">install</span> <span class="string">PyGithub</span></span><br><span class="line">        <span class="string">python</span> <span class="string">.github/workflows/script/post_generator.py</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># commit</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">commit</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--local</span> <span class="string">user.email</span> <span class="string">"xavier.z.zhao@gmail.com"</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--local</span> <span class="string">user.name</span> <span class="string">"xavier"</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"generate new post from github action"</span> <span class="string">-a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># push </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">changes</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这个Action在新issue被创建后会触发，在执行完<code>post_generator.py</code>脚本后，会直接用<a href="https://github.com/ad-m/github-push-action">ad-m/github-push-action@master</a>这个workflow将Github Action环境中的修改推送回仓库的临时目录中。</p><p><code>post_generator.py</code>脚本的代码可以看<a href="https://github.com/xize1993/leetcode/blob/master/.github/workflows/script/post_generator.py">这里</a>，主要逻辑是调用Github的API获取最新的issue，从issue的title中获取我想要创建的leetcode题目编号，生成post的模板文件后放到临时目录。</p><p>这样子当我创建了类似“post:60”标题的issue后，马上仓库下就会有<code>60_permutation_sequence.md</code>的文件被创建，我就可以直接在Github上编辑它了。</p><p><img src="../img/in-post/20200811_auto-deploy-by-github-action/edit-post.jpg" alt="根据指定题号创建的post模板"></p><center>根据指定题号创建的post模板</center><h3 id="根据issue关闭移动post"><a href="#根据issue关闭移动post" class="headerlink" title="根据issue关闭移动post"></a>根据issue关闭移动post</h3><p>当我在将临时目录的post编辑完成后，便可以将issue打上分类关闭了，这时候会触发下面这个Action：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">move-post</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">issues:</span></span><br><span class="line">    <span class="attr">types:</span> <span class="string">[closed]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">python</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">python-version:</span> <span class="string">'3.8'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move post to target floder</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">move</span> <span class="string">post</span> <span class="string">to</span> <span class="string">target</span> <span class="string">floder</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">GITHUB_REPOSITORY:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">pip</span> <span class="string">install</span> <span class="string">PyGithub</span></span><br><span class="line">        <span class="string">python</span> <span class="string">.github/workflows/script/move_post.py</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># commit</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">commit</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--local</span> <span class="string">user.email</span> <span class="string">"xavier.z.zhao@gmail.com"</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--local</span> <span class="string">user.name</span> <span class="string">"xavier"</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"push form github action"</span> <span class="string">-a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># push </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">changes</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这个Action跟上面的差别不大，<code>move_post.py</code>脚本同样会读取issue信息，然后根据issue的label将临时目录的post文件移动到<code>src/</code>下面对应类别的目录下，然后触发第一步的Action构建vuepress。</p><p><img src="../img/in-post/20200811_auto-deploy-by-github-action/close-post.jpg" alt="将issue打上label后关闭"></p><center>将issue打上label后关闭</center><p>上面的issue因为我打了<code>哈希表</code>的label，这是测试时候随便打的，我在<code>src/</code>目录下根据题目类型划分了目录，当label和目录名称匹配上时，post便会被移动到对应的目录下面：<br><img src="../img/in-post/20200811_auto-deploy-by-github-action/catalog2.jpg" alt="post被移动到哈希表目录下"></p><center>post被移动到哈希表目录下</center><p>当vuepress自动构建完成后，再访问gtihub page便可以看到新的文章了：<br><img src="../img/in-post/20200811_auto-deploy-by-github-action/github-page.jpg" alt="访问博客"></p><center>访问博客</center><h2 id="一些踩坑"><a href="#一些踩坑" class="headerlink" title="一些踩坑"></a>一些踩坑</h2><p>Github Action会自动创建<a href="https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#about-the-github_token-secret">GITHUB_TOKEN</a>，很多workflow都可以直接用<code>GITHUB_TOKEN</code>来做认证访问，访问仓库信息等等。<br>我在上面的三个workflow中也都用到了<code>GITHUB_TOKEN</code>，不过在关闭issue，移动post到src目录来触发<code>vuepress-depoly</code>的时候，一直没法触发成功，后来查了才知道Github官方为了防止开发者无意识触发了workflow之间的死循环做了限制，通过<code>GITHUB_TOKEN</code>对仓库本身进行修改是无法触发别的workflow的，可以通过Github的<code>personal access token</code>来达到我们的目的，详情可以查看<a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token">官网</a>。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>目前我的博客的仓库还没有用Github Action，主要是博客的图片也是托管在Github上的，目前还绕不开从本地提交图片文件这一步，而且现在写博客的频率是真的不高，先就这样吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.community/t/action-does-not-trigger-another-on-push-tag-action/17148">Action does not trigger another on push tag action</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在一年后的2019富士山登顶日记</title>
      <link href="/20200712_fujisan-memory/"/>
      <url>/20200712_fujisan-memory/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>2019年8月中旬时候人生第一次登顶了富士山，作为人生マイルストーン的事件，当时就决定要写篇博客作为记录。然而拖延症发作迟迟没有动手，后来就打算等今年再走不同的路线登顶后再写。结果今年由于疫情原因，<a href="http://www.fujisan-climb.jp/current_status.html">官方也确定不开放登山了。</a>今年再登顶的计划也就泡汤了，所以虽然迟到了快一年，但再不写可能就真的不会写了，所幸当时照片拍的还算多，还是可以边回忆边写下这篇记录的。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>富士山是日本第一高峰，肯定不能没有准备就贸贸然去攀登，自己当时也做了一页的功课，这里简单说说。</p><h3 id="登山路线"><a href="#登山路线" class="headerlink" title="登山路线"></a>登山路线</h3><p>富士山有四条登山路线，分别为：</p><ul><li><strong>吉田「よした」ルート</strong></li><li><strong>須走「すばしり」ルート</strong></li><li><strong>御殿場「ごてんば」ルート</strong></li><li><strong>富士宮「ふじのみや」ルート</strong></li></ul><p>登山难度的话大概是御殿場&gt;須走=富士宮&gt;吉田。<br>下面有一个令和元年的<a href="http://www.fujisan-climb.jp/trails/index.html">登山人数数据</a>：<br>| | 吉田ルート | 須走ルート | 御殿場ルート | 富士宮ルート|<br>|—|—|—|—|—|<br>|登山者数（令和元年）| 149,969人 | 20,215人 | 12,230人 |  53,232人|</p><p>可以看出吉田线人数压倒性的多，不喜欢人多混杂的我肯定是选择绕开了，所以虽然没有爬过高山的经验，但出于对自己体能的自信，还是选择了人数较少的须走路线。<br><strong>虽然后来我确实相对无压力地完成这次登山，但对于没有登山经验的人还是比较推荐走吉田，毕竟富士山不是完全没有风险的，人多的路线也相对较为安全</strong>。</p><p><img src="../img/in-post/20200712_fujisan-memory/mountaineering-accident.jpg" alt="在我登山的那个月月底发生的山难"></p><center>在我登山的那个月月底发生的山难</center><h3 id="物品准备"><a href="#物品准备" class="headerlink" title="物品准备"></a>物品准备</h3><p>在装备上我很多参考了机核的这篇<a href="https://www.gcores.com/articles/26612">文章</a>，虽然专业度不算高但对我个人还算OK了，就是Timberland的鞋子太重了，换成高帮的登山鞋会更合适。<br>别的路线不太清楚，但如果是走须走的话，一定要穿高帮鞋子，最好戴上鞋套，因为上下山很多路都是灰沙很大，不做防护的话可能半路就一鞋子沙了。<br><img src="../img/in-post/20200712_fujisan-memory/downhill.jpg" alt="须走路线的下山道"></p><center>须走路线的下山道</center><h3 id="交通工具"><a href="#交通工具" class="headerlink" title="交通工具"></a>交通工具</h3><p>网上有很多富士山的登山攻略，主要都是吉田路线的，其他路线的确实相对较少。不过日语资料还是比较丰富，我主要是通过<a href="http://www.fujisanpo.com/">富士さんぽ</a>来做行程的，最后选择从新宿坐小田急到御殿場站，再转巴士可以直接到须走的登山口。</p><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>住宿方面，如果想要爬夜山看日出的话，还是很有必要预定山小屋的，选择直接在山上过夜的人也有很多，但如果天气不好比如下雨什么的就难受了，不太推荐这么做。我自己是花了7000多日元定了八合目半的一个山小屋，虽然没什么住宿体验（后面会讲），但好歹有个挡风的地方，不至于在山顶瑟瑟发抖。<br>有一点需要注意，<strong>每一条登山岛会路过的山小屋是不一样的</strong>，预定之前要查清楚是不是在自己的路线上。</p><h2 id="登山过程"><a href="#登山过程" class="headerlink" title="登山过程"></a>登山过程</h2><p><img src="../img/in-post/20200712_fujisan-memory/welcome-to-gotemba.jpg" alt="御殿場駅"></p><center>御殿場駅</center><h3 id="喜提队友（A小哥和B小姐）"><a href="#喜提队友（A小哥和B小姐）" class="headerlink" title="喜提队友（A小哥和B小姐）"></a>喜提队友（A小哥和B小姐）</h3><p>8月10号一大早从新宿出发，大概中午就到了御殿場駅，出站就有巴士可以直接到须走口登山口，这让一开始担心迷路的我舒了一口气。</p><p>在巴士的时候遇上了一个在车上侃侃而谈的中国人小哥，装备比我齐全，看上去很有经验的样子。交谈了知道他是在日留学生（下文简称A小哥），年纪比我还小，倒是让我有些惊讶。跟他通行的还有一个女生（下文简称B小姐），一番寒暄后他邀请我同行，因为我是自己一个人去的，所以没什么包袱就愉快入队了，至此暂时结成了一个三人小队。</p><p><img src="../img/in-post/20200712_fujisan-memory/subashiri-gogoume.jpg" alt="五合目登山口"></p><center>须走口五合目登山口，刚抵达的时候赶上山腰浓雾</center><p>巴士大概不到一个小时就到了须走口五合目，这里其实已经是半山腰了，所以严格意义来讲我们算是从半山腰开始登山的。登山口有几家店买饮食和土特产，因为到的时间是中午，我们选择在那里吃了午饭，稍微准备一下才出发的。</p><p>出发前因为A小哥的建议我买了一双鞋套，这个在后来下山时候帮了我很多，虽然我穿的是高帮鞋，但下山时候的火山灰是在你头顶上面乱飘那种程度的。</p><p><img src="../img/in-post/20200712_fujisan-memory/subashiri-gogoume2.jpg" alt="五合目登山口"></p><center>须走口五合目登山口，吃完午饭的时候雾气退散了许多</center><p>五合目到七合目之间的富士山还是比较多树木的，而且刚登山的时候雾气很大，一度担心会不会下雨，路上零星会遇到一些登山的人，日本登山有他们的挨拶文化，大概就是每次路过的人都会互相打招呼，这个气氛我不知道走吉田会不会有？毕竟人流多的话每次都要打招呼也额外会花费不少体力吧？</p><p><img src="../img/in-post/20200712_fujisan-memory/mountain-road.jpg" alt="五合目登山路"></p><center>五合目登山路，刚开始雾气还是比较大的</center><h3 id="小插曲：劝退"><a href="#小插曲：劝退" class="headerlink" title="小插曲：劝退"></a>小插曲：劝退</h3><p>在六合目的时候还遇到一个欧美女人和两个中国男生的队伍，两个男生都穿日常休闲装，一开始没多想还以为是大学师生出来活动，后来搭话了知道他们也是临时组队的。</p><p>两个男生是刚高考完出来旅游的，因为旅馆在附近，下午没事觉得离富士山不远就直接过来爬山了。问他们打算的时候他们还说想要爬到山顶然后下山回去，当时听到了还是有点被惊到，毕竟什么装备都没带，连头灯手电筒都没有，两个高中生想要半天来回海拔三千多米的高山，怎么想很危险，当时又接近晚上了，于是一通好说歹说后，两个男孩也意识到不妥，乘着太阳还没下山就让他们回去了。</p><p><img src="../img/in-post/20200712_fujisan-memory/rokugoume.jpg" alt="6.5合目"></p><center>6.5合目看雾</center><h3 id="队友喜加一"><a href="#队友喜加一" class="headerlink" title="队友喜加一"></a>队友喜加一</h3><p><img src="../img/in-post/20200712_fujisan-memory/stones.jpg" alt="小石堆"></p><center>六七合目附近的小石堆</center><p>之前遇到的两个队友里面，A小哥和B小姐是在知乎的登山群认识的，他们两个都不是第一次等富士山了，而且B小姐意外地体力特别好（后来才知道她是马拉松选手），A小哥体力倒是一般，所以后来基本都是B小姐远远在前面，我在中间，A小哥殿后。</p><p>A小哥是很健谈的人，在6.5合目的时候认识了一个单独爬山的C小哥，也是刚来日本的留学生。大概是A小哥很会搭话，到七合目的时候C小哥就顺利入队了。</p><p><img src="../img/in-post/20200712_fujisan-memory/clouds.jpg" alt="云层"></p><center>七合目开始云层就在自己的下面了</center><p><img src="../img/in-post/20200712_fujisan-memory/mountain-road3.jpg" alt="山路"></p><center>山路也越来越有火山的样子</center><p><img src="../img/in-post/20200712_fujisan-memory/clouds2.jpg" alt="云层2"></p><center>云层还有远处的A小哥</center><h3 id="先行"><a href="#先行" class="headerlink" title="先行"></a>先行</h3><p>到七合目的时候有一个山小屋，而且刚好还有床位。队伍里面只有我自己是提前预定了山小屋了，因为担心后面没有山小屋可以住宿，所以剩下的队友都决定在这里休息到半夜再继续走，我便自己一个人继续前进了。</p><p><img src="../img/in-post/20200712_fujisan-memory/mountain-hut.jpg" alt="云小屋和云"></p><center>云小屋和云</center><p>去爬富士山之前刚看了《天气之子》，刚巧爬山路上也看到了类似电影里面的雨云。<br>夏季的富士山远远看着黑秃秃的，但置身山上时候，随便远眺都是各种美景。</p><p><img src="../img/in-post/20200712_fujisan-memory/clouds3.jpg" alt="云层3"></p><center>东京没有被大雨淹没，所以阳菜在雨云上面？</center><p><img src="../img/in-post/20200712_fujisan-memory/board.jpg" alt="七合目的牌子"></p><center>七合目的牌子</center><h3 id="入夜"><a href="#入夜" class="headerlink" title="入夜"></a>入夜</h3><p><img src="../img/in-post/20200712_fujisan-memory/the-color-of-the-night.jpg" alt="入夜"></p><center>夜色</center><p>到八合目的时候已经是晚上七八点了，夜色变深，天气也渐渐变冷了。从七点五合目到八合目路上已经只有零星几个人，这时候已经需要戴上头灯才能看清路了。</p><p>从我这一面的山可以看到远处的城镇，当时是夏天，远处某个城市应该在举办花火大会。</p><p><img src="../img/in-post/20200712_fujisan-memory/fireworks.jpg" alt="烟花"></p><center>前方是前往富士山顶的道路，后面是远处城镇的花火</center><p>第一次登夜山，中间有段路还几乎没人，还是蛮害怕的，好在没有下雨。<br>我到八点五合目预定的山小屋的时候差不多是8点多，当时工作人员已经准备收拾桌子了，我赶上他们厨房关门前点了一碗拉面，虽然后来在山顶发现也有卖拉面的，不过并没有去吃，所以山小屋点的这碗拉面就是我在日本最高处吃的拉面了。</p><p><img src="../img/in-post/20200712_fujisan-memory/Ramen.jpg" alt="拉面"></p><center>日本最高峰吃的拉面，价格800多日元</center><h3 id="山小屋"><a href="#山小屋" class="headerlink" title="山小屋"></a>山小屋</h3><p>在山小屋外面的座椅陆陆续续会来一些登山者，他们都是没能预约上山小屋的，大部分都选择了在这里修整，不过因为山小屋不让没预定的人进里面，所以他们只能在外面坐着。</p><p>这里还是蛮庆幸自己提前预定到了山小屋，因为入夜后山上真的很冷，而且那天也是天气好没下雨，如果下雨的话我真的不知道他们在外面要怎么过。</p><p><img src="../img/in-post/20200712_fujisan-memory/mountain-hut2.jpg" alt="山小屋"></p><center>在山小屋外面休息的登山者</center><p>山小屋的环境其实不怎么好，外面一个大堂，里面就是一个大房间，连厕所都要出去外面才有。  </p><p><img src="../img/in-post/20200712_fujisan-memory/toilet.jpg" alt="山小屋外面的厕所"></p><center>高山上的厕所不能奢望太多，里面味道十分感人</center><p>我在的那个房间大概就六七十平，分为了上下床，大概塞了两三百人（不确定），反正当时留给我的床铺的宽度十分狭窄，连翻身都是奢望。而且几百号人挤在一起，打呼的人也并不少，很不幸的当时我旁边睡着屋子里打呼最大声的一位，翻来覆去实在受不了，直接放弃睡眠去外面大堂坐着了。</p><p>然后这里我做了一个很错误的决定，因为在山小屋里面实在无聊，干瞪着眼睡不着，又不好发出声响免得吵到别人，然后到午夜12点过后，外面的登山者又陆陆续续往山上出发。<br>当时我睡不着，也就想着跟登山的部队一起往山上继续走段路，这里也不知道是幸运还是不幸。</p><h3 id="后半夜"><a href="#后半夜" class="headerlink" title="后半夜"></a>后半夜</h3><p><img src="../img/in-post/20200712_fujisan-memory/mountaineer.jpg" alt="夜间的登山者队伍"></p><center>夜间的登山者队伍</center><p>山小屋外面十分冷，而且我出山小屋后才发现头灯落在了里面（后来也没找回来），当时也确定了队友从七合目的山小屋出发，我就想着在外面等他们来了一起走。<br>当时大概等了一两个小时，因为山小屋回不去（走了一段距离），外面风大又很冷，所以大概是我这次爬山最难受的一段时间，到半夜两点时候开始发现情况不太对劲了。</p><p>须走线和吉田线在本八合目开始交汇，到了后半夜很多为了看日出的登山者都继续启程，山道也开始变得拥挤了。</p><p><img src="../img/in-post/20200712_fujisan-memory/mountaineer2.jpg" alt="从我下方蜂拥过来的登山者"></p><center>从我下方蜂拥过来的登山者</center><p>我在大约不到九合目的地方开始发现前面的登山队伍开始移动得很缓慢，而此时我的队友发消息过来说他们还不到八合目（后面的拥挤也导致他们前进缓慢），此时离日出的预计时间（4点多）只剩一个多小时了，担心来不及山顶看日出，于是跟他们打了招呼，我便开始继续向山顶出发了。</p><p><img src="../img/in-post/20200712_fujisan-memory/mountaineer3.jpg" alt="移动缓慢的队伍"></p><center>移动缓慢的队伍</center><h3 id="日出"><a href="#日出" class="headerlink" title="日出"></a>日出</h3><p>从九合目到山顶的路线移动特别缓慢，一方面是来自吉田路线的大量人流，另一方面也是登顶路线相对的狭窄陡峭。<br>我的运气还算好，在日出天际线出来的时候已经接近山顶的鸟居了，此时我后方还有大量人流，他们应该都只能在山路边看日出了。</p><p><img src="../img/in-post/20200712_fujisan-memory/skyline.jpg" alt="天际线"></p><center>天际线</center><p><img src="../img/in-post/20200712_fujisan-memory/mountaineer4.jpg" alt="无缘山顶看日出的人流"></p><center>无缘山顶看日出的人流</center><p><img src="../img/in-post/20200712_fujisan-memory/skyline2.jpg" alt="天际线2"></p><center>山顶鸟居边等待日出的人们</center><p>到山顶的时候已经有很多人在了，日出的位置面向着河口湖，随着太阳升起，当时真的有一种在林克走出山洞初窥海拉尔的壮观的感觉。</p><p><img src="../img/in-post/20200712_fujisan-memory/sunrise.jpg" alt="日出"></p><center>日出的壮观美景</center><h3 id="富士山顶"><a href="#富士山顶" class="headerlink" title="富士山顶"></a>富士山顶</h3><p><img src="../img/in-post/20200712_fujisan-memory/peak.jpg" alt="山顶"></p><center>山顶的人</center><p>看完日出，大概等了半个多小时我的队友才姗姗来迟，我们在山顶吃了些东西休整了一下，A小哥甚至还带了一些叉烧。</p><p>富士山的山顶还是很大的，上面有各种物产店，剑锋石碑，还有山顶邮局。而在中间有一个凹下去的大坑，在下面还有一个鸟居。<br>我们在A小哥的提议下去了山顶邮局，从这里寄出的明信片会有一个限定的富士山顶章（日本人对各种章的着迷还是让人蛮莫名的），我也跟着买了一组寄给国内的朋友，不过后来好像只有一半多的人收到了，也是遗憾。</p><p><img src="../img/in-post/20200712_fujisan-memory/peak2.jpg" alt="山顶"></p><center>让人在意的洞</center><p><img src="../img/in-post/20200712_fujisan-memory/peak3.jpg" alt="山顶邮局"></p><center>山顶邮局和日本最高的📮</center><h3 id="下山"><a href="#下山" class="headerlink" title="下山"></a>下山</h3><p><img src="../img/in-post/20200712_fujisan-memory/downhill2.jpg" alt="倒下的石碑"></p><center>倒下的石碑</center><p>在山顶逛了一圈便决定下山了，下山时候跟队友商量了下，最终还是选择走须走下山，主要我们都觉得吉田线人太多了。</p><p><img src="../img/in-post/20200712_fujisan-memory/downhill3.jpg" alt="下山的景色"></p><center>下山的景色</center><p>不过我们选择之前并没有事先了解好须走线的上下山路线区别，导致队友之一的C小哥后来脚受伤了。</p><p><img src="../img/in-post/20200712_fujisan-memory/downhill4.jpg" alt="下山的景色"></p><center>须走线下山口的景色</center><p>走须走线上山的时候虽然也不轻松，但总体是山地的感觉，而下山的时候有很大的不同，因为有很长一段路都是柔软的沙路，而且个别沙道也一份陡峭，据说这也是富士山的名物，叫做“砂走り”。</p><p>所以基本上下山时候是滑着下来的，从感觉上来讲有点像双板滑雪，一开始有点害怕，但后来滑下来也是异常刺激。</p><p>刺激的活动也伴随着危险，全程沙走下来也很消耗体力，队友的C小哥就不幸脚受伤了，所以后来我们下山的行程比预计晚了不少，不过好在没有更危险的事发生。</p><p><img src="../img/in-post/20200712_fujisan-memory/sunahashiri.jpg" alt="砂走り"></p><center>砂走り（图来源于网上）</center><p>大概在下午5点多抵达须走五合目，然后原路巴士和小田急就回东京了。原本想要下山后去泡个温泉，也因为没时间错过了，希望下次会有机会。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写这篇文章时候日本新冠第二波正来势汹汹，除了不能出去浪多少有些残念之外，对于未来的生活也有感到一些不安。<br>这半年的世界局势变化之快，也让人深感个体面对时代洪流的无力。<br>不过哪怕处于历史转折点，生活也还是要继续，还是希望2021年能再次登顶富士山吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 登山 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用IDEA Community和Docker构建Spring Boot开发环境</title>
      <link href="/20200516_spring-docker-debug/"/>
      <url>/20200516_spring-docker-debug/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前阵子开始学习Docker，容器化确实是很方便很有魅力的技术，因为在工作中并没有用到，便想着能不能在自己的日常开发中使用学习。</p><p>实践上的话第一个想到的还是用来构建开发环境，不同于其他发行版多的语言，Java开发环境中JDK还是比较少变化的（虽然这几年迭代速度快了很多），而且Java是编译型语言，在将Docker运用到开发环境中感觉还是较为麻烦的，这里记录一下自己的折腾过程。</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>本文主要围绕使用IDEA Community进行Spring Boot应用的开发做记录，在网上查找资料时感觉IDEA不同版本下对Docker的支持差别还蛮大的，毕竟Docker也是这几年才快速发展的技术，IDE厂商们跟进肯定也不是一步到位的，前期坑也不少，如果想在不同版本尝试体验的话，我会推荐你直接查看对应版本的IDEA官方Guide。<br>本文涉及的工具版本等如下：</p><ul><li>IDEA Community 2020.1.1<br>（安装好Docker和Spring插件）</li><li>Docker 19.03.8</li><li>docker-compose 1.25.4</li></ul><h2 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h2><p>首先是程序，主要想实践一个每次访问后递增数字的Restful接口，数字存在Redis容器中；<br>开发效果上当然想尽量能够跟直接在本地开发一样，包括热更新等的使用体验。</p><h2 id="程序的运行环境完全使用Docker"><a href="#程序的运行环境完全使用Docker" class="headerlink" title="程序的运行环境完全使用Docker"></a>程序的运行环境完全使用Docker</h2><h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><p>Demo的代码可以查看我的<a href="https://github.com/zhaozecheng/spring-docker-debug-demo">Github仓库</a>。</p><ol><li><p>Java程序<br>首先先通过Spring Assistant插件创建一个Spring Boot项目，勾选上web，Redis和devtool等需要的依赖后，先实现需要的程序： </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String KEY = <span class="string">"demo-key"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/increase"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stringRedisTemplate.hasKey(KEY)) &#123;</span><br><span class="line">            String val = stringRedisTemplate.opsForValue().get(KEY);</span><br><span class="line">            result = (Integer.parseInt(val) + <span class="number">1</span>) + <span class="string">""</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(KEY, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(KEY, <span class="string">"1"</span>);</span><br><span class="line">            result = <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Dockerfile<br>创建一个Dockerfile，拷贝项目后执行<code>mvn packge</code>打包：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /project</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y maven \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">cd</span> /project \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mvn package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>创建docker-compose.yml<br>创建docker-compose文件，主要包含执行jar包的app容器和redis容器</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5-alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"6379:6379"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br></pre></td></tr></table></figure></li><li><p>Spring配置文件<br>因为运行在Docker上，<code>application.yml</code>上redis的host填入redis容器的名称。</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>安装好Docker插件后在<code>docker-compose.yml</code>文件左侧会有启动和debug图标，直接启动跟用<code>docker-compose up</code>差不多，下面记录一下debug启动。</p><ol><li><p>启动参数配置</p><p> 点击<code>docker-compose.yml</code>文件左侧的debug图标后，在出现的面板上勾选上当前模块，然后双击下面的launch编辑docker的启动参数。<br> 关键在于<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</code>这个参数，它的作用是指定JVM开启调试端口，后面踩坑记录里也会涉及到它。</p><blockquote><p>如果JDK是8或者之前的版本，address的值改成5005，即<code>address=5005</code>  </p></blockquote></li></ol><pre><code>![启动面板配置](../img/in-post/20200516_spring-docker-debug/run-configuration.jpg)&lt;center&gt;启动面板配置&lt;/center&gt;![编辑Docker启动参数](../img/in-post/20200516_spring-docker-debug/configure-docker.jpg)&lt;center&gt;编辑Docker启动参数&lt;/center&gt;</code></pre><ol><li><p>Debug模式启动</p><p> 编辑好启动器后可以直接点击点击<code>docker-compose.yml</code>文件左侧的debug图标启动程序，不过因为会重新创建容器，所以如果已经有容器在运行的话要先停止运行并删除。</p><p> <img src="../img/in-post/20200516_spring-docker-debug/startup.jpg" alt="启动程序"></p> <center>点击启动程序</center><p> <img src="../img/in-post/20200516_spring-docker-debug/starting-success.jpg" alt="启动成功"></p> <center>启动成功</center></li><li><p>访问程序</p><p> 启动后通过<code>http://localhost:8080/demo/increase</code>连续访问接口，递增的接口便完成了。</p><p> <img src="../img/in-post/20200516_spring-docker-debug/access1.jpg" alt="第一次访问"></p> <center>第一次访问</center><p> <img src="../img/in-post/20200516_spring-docker-debug/access2.jpg" alt="第二次访问"></p> <center>第二次访问</center></li><li><p>调试程序</p><p> 这个时候已经可以正常打断点和调试程序了。</p><p> <img src="../img/in-post/20200516_spring-docker-debug/set-breakpoint.jpg" alt="设置断点"></p> <center>设置断点</center><p> <img src="../img/in-post/20200516_spring-docker-debug/debug-application.jpg" alt="进入断点"></p> <center>访问接口进入断点</center></li><li><p>热部署</p><p> 如果事先引入了<code>devtools</code>依赖的话，热部署也是可以直接用的（需要重新编译）。</p><p> <img src="../img/in-post/20200516_spring-docker-debug/change-code.jpg" alt="修改程序递增值为2"></p> <center>修改程序递增值为2</center><p> <img src="../img/in-post/20200516_spring-docker-debug/event-log.jpg" alt="重新编译后日志"></p> <center>重新编译后日志</center><p> <img src="../img/in-post/20200516_spring-docker-debug/access3.jpg" alt="修改后第一次访问"></p> <center>修改后第一次访问</center><p> <img src="../img/in-post/20200516_spring-docker-debug/access4.jpg" alt="修改后第二次访问"></p> <center>修改后第二次访问</center><p> 可以看到递增值变成了2，这里容器并没有重新启动的，不过如果修改配置文件或者依赖文件的话就需要重启容器或者重新build了，这个还是相对麻烦的。</p></li></ol><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="遇到handshake-failed-connection-prematurally-closed"><a href="#遇到handshake-failed-connection-prematurally-closed" class="headerlink" title="遇到handshake failed - connection prematurally closed"></a>遇到<code>handshake failed - connection prematurally closed</code></h3><p>在启动容器的时候有遇到启动不成功，报一下log的情况：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">10:21Error running &#39;Remote with compose&#39;: Unable to open debugger port (localhost:5005): java.io.IOException &quot;handshake failed - connection prematurally closed&quot;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">网上查了下发现引起这个错误的可能还是蛮多的，从最常见的启动命令行写错到本地JVM版本与Docker容器JVM版本不同，好几种都有。</span><br><span class="line"></span><br><span class="line">不过上面这些原因在我自己身上都不适用，调查时候发现容器都是成功启动的，容器的调试端口（5005）也是运行着的。</span><br><span class="line">于是通过&#96;docker exec&#96;进入容器用，发现5005端口并没有被监听，于是怀疑jar包运行时候&#96;-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;*:5005&#96;没有生效。</span><br><span class="line"></span><br><span class="line">于是退出容器适用&#96;docker inspect&#96;查看容器信息，发现启动参数确实很奇怪：</span><br><span class="line">    </span><br><span class="line">![docker inspect查看启动参数](..&#x2F;img&#x2F;in-post&#x2F;20200516_spring-docker-debug&#x2F;docker-inspect1.jpg)</span><br><span class="line">&lt;center&gt;docker inspect查看启动参数&lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line">查找到这里就基本知道原因了，IDEA的Docker启动器上配置的启动调试端口的命令行被覆盖或者说拼接在一个没有启动调试端口的命令行后面，导致后面连接调试端口失败。然后我查看当时的Dockerfile，发现当时的代码如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;dockerfile</span><br><span class="line">FROM openjdk:11</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;project</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y maven \</span><br><span class="line">    &amp;&amp; cd &#x2F;project \</span><br><span class="line">    &amp;&amp; mvn package</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;&#x2F;project&#x2F;target&#x2F;docker-debug-demo-0.0.1-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure><p>跟上面的Dockerfile不同的地方在于当时根据<a href="https://github.com/IdeaUJetBrains/SpringBootDockerDemoDebug/blob/master/Dockerfile">官方DEMO</a>学习，执行默认命令的时候用了<code>ENTRYPOINT</code>而不是<code>CMD</code>，而在<code>docker-compose.yml</code>文件的代码如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/project/target/docker-debug-demo-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>这里用的是<code>command</code>命令，因为Dockerfile和docker-compose.yml文件的命令基本是一致的，所以我去看了下docker-compose.yml文档，发现确实有<a href="https://docs.docker.com/compose/compose-file/#entrypoint">entrypoint</a>参数，并且有下面这段Note：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Setting entrypoint both overrides any default entrypoint set on the service’s image with the ENTRYPOINT Dockerfile instruction, and clears out any default command on the image - meaning that if there’s a CMD instruction in the Dockerfile, it is ignored.</span><br></pre></td></tr></table></figure><p>而<a href="https://docs.docker.com/compose/compose-file/#command">command</a>上并没有类似的Note，这说明docker-compose.yml文件的<code>entrypoint</code>可以覆盖Dockerfile的<code>CMD</code>，但<code>command</code>应该是没法覆盖Dockerfile的<code>ENTRYPOINT</code>的，于是通过将Dockerfile的<code>ENTRYPOINT</code>改成<code>CMD</code>，果然可以正常执行了。</p><p><img src="../img/in-post/20200516_spring-docker-debug/docker-inspect2.jpg" alt="docker inspect查看启动参数"></p><center>修改后通过docker inspect查看启动参数</center><p>写这个Demo时候我都是参考官方Demo的代码来写的（后来试着跑官方Demo也有同样问题），算是踩了官方的坑，不过也是有自己对Docker还不太熟悉的原因吧。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>IDEA对于Docker的支持总体来讲还算成熟，但用的时候还是有一些不太舒服的地方，比如修改依赖或者配置等后需要重新打包镜像，应用的调试信息没法在IDEA的控制台查看，还时不时可能有一些小坑等等。但好处也是一样的，随着Java大版本发布频率变高，可能个人开发环境需要多个版本JDK的情况会变多，那么用Docker隔离环境还是很舒服的，特别是对我这样强迫症而言，我现在都有把本地机器各种环境都搬上Docker的冲动了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jetbrains.com/help/idea/run-and-debug-a-spring-boot-application-using-docker-compose.html">Run and debug a Spring Boot application using Docker Compose</a>  </li><li><a href="https://github.com/IdeaUJetBrains/SpringBootDockerDemoDebug">SpringBootDockerDemoDebug</a></li><li><a href="https://www.sys1yagi.com/entry/2019/04/04/165234">ntelliJ IDEAからDocker上で動くSprint Bootアプリにdebuggerをつなぐ</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
